/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description Registration successful */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: {
                    refreshToken?: string;
                };
            };
            requestBody?: never;
            responses: {
                /** @description Access token refreshed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update profile */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateProfileRequest"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
            };
        };
        trace?: never;
    };
    "/machines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all machines */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: number;
                    /** @description Items per page */
                    limit?: number;
                    /** @description Sort field (name, price, rating) */
                    sort?: "name" | "price" | "rating" | "createdAt";
                    /** @description Sort order */
                    order?: "asc" | "desc";
                    /** @description Minimum price filter */
                    minPrice?: number;
                    /** @description Maximum price filter */
                    maxPrice?: number;
                    /** @description Search term in name */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of machines */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MachineList"];
                    };
                };
                401: components["responses"]["BadRequestError"];
            };
        };
        put?: never;
        /** Create a new machine */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MachineCreate"];
                };
            };
            responses: {
                /** @description Machine created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Machine"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/machines/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a machine by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Machine found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Machine"];
                    };
                };
                404: components["responses"]["BadRequestError"];
            };
        };
        /** Update a machine */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MachineUpdate"];
                };
            };
            responses: {
                /** @description Machine updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Machine"];
                    };
                };
                401: components["responses"]["BadRequestError"];
            };
        };
        post?: never;
        /** Delete a machine */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Machine deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                404: components["responses"]["BadRequestError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/machines/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Toggle like status for a machine */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Like status toggled */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            like?: boolean;
                        };
                    };
                };
                404: components["responses"]["BadRequestError"];
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginRequest: {
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
        };
        User: {
            /**
             * Format: uuid
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * Format: email
             * @example user@example.com
             */
            email: string;
            /** @example John */
            name?: string | null;
            /** @example Doe */
            surname?: string | null;
            /**
             * Format: uri
             * @example https://example.com/avatar.jpg
             */
            image?: string | null;
            /**
             * Format: date-time
             * @example 2023-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2023-01-01T00:00:00Z
             */
            updatedAt?: string;
        };
        AuthResponse: {
            accessToken: string;
            user: components["schemas"]["User"];
        };
        Error: {
            message: string;
            code: string;
        };
        RegisterRequest: {
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
        };
        UpdateProfileRequest: {
            /**
             * Format: email
             * @example new-email@example.com
             */
            email?: string | null;
            /** @example Alex */
            name?: string | null;
            /** @example Smith */
            surname?: string | null;
            /**
             * Format: uri
             * @example https://example.com/new-avatar.jpg
             */
            image?: string | null;
            /** Format: password */
            password?: string;
        };
        Machine: {
            /**
             * Format: uuid
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id?: string;
            /** @example Excavator X-2000 */
            name: string;
            images?: string[];
            /**
             * Format: float
             * @example 25000.99
             */
            price: number;
            /**
             * Format: float
             * @example 4.5
             */
            rating?: number;
            /** @example true */
            like?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        MachineList: {
            list: components["schemas"]["Machine"][];
            total: number;
            totalPages: number;
        };
        MachineCreate: {
            /** @example Excavator X-2000 */
            name: string;
            images?: string[];
            /**
             * Format: float
             * @example 25000.99
             */
            price: number;
            /**
             * Format: float
             * @example 4.5
             */
            rating?: number;
        };
        MachineUpdate: {
            /** @example Excavator X-2000 Pro */
            name?: string;
            images?: string[];
            /**
             * Format: float
             * @example 27000.5
             */
            price?: number;
            /**
             * Format: float
             * @example 4.7
             */
            rating?: number;
        };
    };
    responses: {
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Bad request */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
